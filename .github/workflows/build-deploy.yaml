name: Build & Deploy to ECS via Terraform

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      rollback_tag:
        description: "Rollback to specific image tag (optional)"
        required: false
        default: ""

permissions:
  id-token: write
  contents: read
  pull-requests: read

env:
  AWS_REGION: ap-south-1
  TF_DIR: terraform
  S3_BUCKET: ten-terraform-statefile

jobs:
  detect-environments:
    name: Detect .tfvars Environments
    runs-on: ubuntu-latest
    outputs:
      env_list: ${{ steps.set.outputs.json_envs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect .tfvars
        id: set
        run: |
          files=$(ls ${{ env.TF_DIR }}/*.tfvars 2>/dev/null || true)
          if [ -z "$files" ]; then
            echo "No .tfvars files found."
            echo "json_envs=[]" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          envs=()
          for f in $files; do
            envs+=("$(basename "$f" .tfvars)")
          done
          json=$(printf '%s\n' "${envs[@]}" | jq -R . | jq -s -c .)
          echo "Detected envs: $json"
          echo "json_envs=$json" >> "$GITHUB_OUTPUT"

  build-deploy:
    name: Build & Deploy (per environment)
    needs: detect-environments
    if: ${{ needs.detect-environments.outputs.env_list != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{ fromJson(needs.detect-environments.outputs.env_list) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::593002333172:role/BE_Github_Actions
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions

      - name: Set environment context
        run: echo "ENVIRONMENT=${{ matrix.env }}" >> $GITHUB_ENV

      - name: Parse ECR repo from tfvars
        id: parse
        run: |
          ECR_REPO=$(grep '^ecr_repo' ${{ env.TF_DIR }}/${{ matrix.env }}.tfvars | awk -F'=' '{print $2}' | tr -d ' "')
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV

      - name: Fetch secrets from AWS Secrets Manager
        id: fetch-secrets
        run: |
          SECRET_VALUE=$(aws secretsmanager get-secret-value \
            --secret-id BE_Nextgen_Secreats \
            --query SecretString \
            --output text)
          if [ -z "$SECRET_VALUE" ]; then
            echo "❌ No secret value found!"
            exit 1
          fi
          echo "$SECRET_VALUE" | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env
          echo "✅ Secrets saved to .env"

      - name: Load env vars from .env
        run: |
          set -o allexport
          source .env
          set +o allexport
          echo "✅ Environment variables loaded from Secrets Manager"

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        if: ${{ github.event.inputs.rollback_tag == '' }}
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker tag $ECR_REPO:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG

      - name: Push Docker Image
        if: ${{ github.event.inputs.rollback_tag == '' }}
        run: docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${{ env.IMAGE_TAG }}

      - name: Rollback (use existing image)
        if: ${{ github.event.inputs.rollback_tag != '' }}
        run: |
          echo "IMAGE_TAG=${{ github.event.inputs.rollback_tag }}" >> $GITHUB_ENV
          echo "⚙️ Rollback mode enabled with tag ${{ github.event.inputs.rollback_tag }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${{ env.S3_BUCKET }}" \
            -backend-config="key=ecs/${{ matrix.env }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -reconfigure

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform plan \
            -var "image_tag=${{ env.IMAGE_TAG }}" \
            -var-file="${{ matrix.env }}.tfvars" \
            -out=tfplan-${{ matrix.env }}

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve tfplan-${{ matrix.env }}
      - name: Update ECS Task Definition image
        run: |
          # Extract cluster and service from tfvars
          CLUSTER=$(grep '^ecs_cluster' ${{ env.TFVARS_FILE }} | awk -F'=' '{print $2}' | tr -d ' "')
          SERVICE=$(grep '^ecs_service' ${{ env.TFVARS_FILE }} | awk -F'=' '{print $2}' | tr -d ' "')

          # Get current task definition
          TASK_DEF=$(aws ecs describe-services --cluster $CLUSTER --services $SERVICE --query 'services[0].taskDefinition' --output text)

          # Generate new task definition JSON with updated image
          UPDATED_JSON=$(aws ecs describe-task-definition --task-definition $TASK_DEF \
            | jq -c --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}" \
              '.taskDefinition | .containerDefinitions[0].image=$IMAGE | del(.taskDefinitionArn, .revision, .status, .registeredBy, .registeredAt)')

          # Optional: debug output to verify JSON
          echo "Debug: new task definition JSON"
          echo "$UPDATED_JSON"

          # Register new task definition revision
          NEW_TASK_DEF=$(echo "$UPDATED_JSON" \
            | aws ecs register-task-definition --cli-input-json file:///dev/stdin \
            --query 'taskDefinition.taskDefinitionArn' --output text)

          # Update ECS service to use the new task definition revision
          aws ecs update-service --cluster $CLUSTER --service $SERVICE --task-definition $NEW_TASK_DEF

          echo "✅ Updated ECS service $SERVICE with new image tag: ${{ env.IMAGE_TAG }}"



