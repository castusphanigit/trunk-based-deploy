name: Build and Deploy to ECS via Terraform (Trunk-Based)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      rollback_tag:
        description: "Rollback to a specific image tag (optional)"
        required: false
        default: ""

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-south-1
  TF_DIR: terraform
  S3_BUCKET: ten-terraform-statefile
  DYNAMODB_TABLE: terraform-locks

jobs:
  detect-envs:
    name: Detect Environments
    runs-on: ubuntu-latest
    outputs:
      env-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect .tfvars files
        id: set-matrix
        run: |
          MATRIX_ENVS=$(ls ${{ env.TF_DIR }}/*.tfvars 2>/dev/null | xargs -n1 basename | sed 's/.tfvars//g' | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$MATRIX_ENVS" >> $GITHUB_OUTPUT

  build-deploy:
    name: Build & Deploy ECS per Env
    needs: detect-envs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ${{fromJson(needs.detect-envs.outputs.env-matrix)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::593002333172:role/BE_Github_Actions
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Environment Variables
        run: |
          echo "ENVIRONMENT=${{ matrix.env }}" >> $GITHUB_ENV
          # Path relative to working-directory (terraform/)
          echo "TFVARS_FILE=${{ matrix.env }}.tfvars" >> $GITHUB_ENV

      - name: Extract ECR repo and region from tfvars
        id: parse
        run: |
          ECR_REPO=$(grep '^ecr_repo' ${{ env.TFVARS_FILE }} | awk -F'=' '{print $2}' | tr -d ' "')
          REGION=$(grep '^region' ${{ env.TFVARS_FILE }} | awk -F'=' '{print $2}' | tr -d ' "')
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV
          echo "AWS_REGION=$REGION" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Fetch secrets from AWS Secrets Manager
        id: fetch-secrets
        run: |
          SECRET_VALUE=$(aws secretsmanager get-secret-value \
            --secret-id BE_Nextgen_Secreats \
            --query SecretString \
            --output text)
          if [ -z "$SECRET_VALUE" ]; then
            echo "❌ No secret value found!"
            exit 1
          fi
          echo "$SECRET_VALUE" | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env

      - name: Load env vars from .env
        run: |
          set -o allexport
          source .env
          set +o allexport

      - name: Build Docker image
        if: ${{ github.event.inputs.rollback_tag == '' }}
        run: |
          IMAGE_TAG=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $ECR_REPO:$IMAGE_TAG .
          docker tag $ECR_REPO:$IMAGE_TAG ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$IMAGE_TAG

      - name: Push Docker image to ECR
        if: ${{ github.event.inputs.rollback_tag == '' }}
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:${{ env.IMAGE_TAG }}

      - name: Use rollback image tag
        if: ${{ github.event.inputs.rollback_tag != '' }}
        run: |
          echo "IMAGE_TAG=${{ github.event.inputs.rollback_tag }}" >> $GITHUB_ENV
          echo "⚙️ Rollback mode: Using image tag ${{ github.event.inputs.rollback_tag }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Terraform Init with environment-specific backend
        working-directory: ${{ env.TF_DIR }}
        run: |
          BACKEND_KEY="ecs-app/${{ matrix.env }}/terraform.tfstate"
          terraform init -upgrade \
            -backend-config="bucket=${{ env.S3_BUCKET }}" \
            -backend-config="key=$BACKEND_KEY" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.DYNAMODB_TABLE }}"

      - name: Terraform Plan
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform plan \
            -var "image_tag=${{ env.IMAGE_TAG }}" \
            -var-file="${{ env.TFVARS_FILE }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve tfplan

      - name: Verify ECS Service
        run: |
          CLUSTER=$(grep '^ecs_cluster' ${{ env.TFVARS_FILE }} | awk -F'=' '{print $2}' | tr -d ' "')
          SERVICE=$(grep '^ecs_service' ${{ env.TFVARS_FILE }} | awk -F'=' '{print $2}' | tr -d ' "')
          aws ecs wait services-stable --cluster $CLUSTER --services $SERVICE --region $AWS_REGION
          echo "✅ ECS service $SERVICE in $CLUSTER is stable for $ENVIRONMENT"
